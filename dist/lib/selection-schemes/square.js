"use strict";

require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.array.reduce.js");
var dateUtils = _interopRequireWildcard(require("../date-utils"));
var _dateFns = require("date-fns");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const square = (selectionStart, selectionEnd, dateList) => {
  let selected = [];
  if (selectionEnd == null) {
    if (selectionStart) selected = [selectionStart];
  } else if (selectionStart) {
    const dateIsReversed = (0, _dateFns.isBefore)((0, _dateFns.startOfDay)(selectionEnd), (0, _dateFns.startOfDay)(selectionStart));
    const timeIsReversed = selectionStart.getHours() > selectionEnd.getHours();
    selected = dateList.reduce((acc, dayOfTimes) => acc.concat(dayOfTimes.filter(t => selectionStart && selectionEnd && dateUtils.dateIsBetween(dateIsReversed ? selectionEnd : selectionStart, t, dateIsReversed ? selectionStart : selectionEnd) && dateUtils.timeIsBetween(timeIsReversed ? selectionEnd : selectionStart, t, timeIsReversed ? selectionStart : selectionEnd))), []);
  }
  return selected;
};
var _default = square;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkYXRlVXRpbHMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZGF0ZUZucyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJzcXVhcmUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImRhdGVMaXN0Iiwic2VsZWN0ZWQiLCJkYXRlSXNSZXZlcnNlZCIsImlzQmVmb3JlIiwic3RhcnRPZkRheSIsInRpbWVJc1JldmVyc2VkIiwiZ2V0SG91cnMiLCJyZWR1Y2UiLCJhY2MiLCJkYXlPZlRpbWVzIiwiY29uY2F0IiwiZmlsdGVyIiwidCIsImRhdGVJc0JldHdlZW4iLCJ0aW1lSXNCZXR3ZWVuIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zZWxlY3Rpb24tc2NoZW1lcy9zcXVhcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZGF0ZVV0aWxzIGZyb20gJy4uL2RhdGUtdXRpbHMnXG5pbXBvcnQgeyBpc0JlZm9yZSwgc3RhcnRPZkRheSB9IGZyb20gJ2RhdGUtZm5zJ1xuXG5jb25zdCBzcXVhcmUgPSAoc2VsZWN0aW9uU3RhcnQ6IERhdGUgfCBudWxsLCBzZWxlY3Rpb25FbmQ6IERhdGUgfCBudWxsLCBkYXRlTGlzdDogQXJyYXk8QXJyYXk8RGF0ZT4+KTogQXJyYXk8RGF0ZT4gPT4ge1xuICBsZXQgc2VsZWN0ZWQ6IEFycmF5PERhdGU+ID0gW11cbiAgaWYgKHNlbGVjdGlvbkVuZCA9PSBudWxsKSB7XG4gICAgaWYgKHNlbGVjdGlvblN0YXJ0KSBzZWxlY3RlZCA9IFtzZWxlY3Rpb25TdGFydF1cbiAgfSBlbHNlIGlmIChzZWxlY3Rpb25TdGFydCkge1xuICAgIGNvbnN0IGRhdGVJc1JldmVyc2VkID0gaXNCZWZvcmUoc3RhcnRPZkRheShzZWxlY3Rpb25FbmQpLCBzdGFydE9mRGF5KHNlbGVjdGlvblN0YXJ0KSlcbiAgICBjb25zdCB0aW1lSXNSZXZlcnNlZCA9IHNlbGVjdGlvblN0YXJ0LmdldEhvdXJzKCkgPiBzZWxlY3Rpb25FbmQuZ2V0SG91cnMoKVxuXG4gICAgc2VsZWN0ZWQgPSBkYXRlTGlzdC5yZWR1Y2UoXG4gICAgICAoYWNjLCBkYXlPZlRpbWVzKSA9PlxuICAgICAgICBhY2MuY29uY2F0KFxuICAgICAgICAgIGRheU9mVGltZXMuZmlsdGVyKFxuICAgICAgICAgICAgdCA9PlxuICAgICAgICAgICAgICBzZWxlY3Rpb25TdGFydCAmJlxuICAgICAgICAgICAgICBzZWxlY3Rpb25FbmQgJiZcbiAgICAgICAgICAgICAgZGF0ZVV0aWxzLmRhdGVJc0JldHdlZW4oXG4gICAgICAgICAgICAgICAgZGF0ZUlzUmV2ZXJzZWQgPyBzZWxlY3Rpb25FbmQgOiBzZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgIGRhdGVJc1JldmVyc2VkID8gc2VsZWN0aW9uU3RhcnQgOiBzZWxlY3Rpb25FbmRcbiAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICBkYXRlVXRpbHMudGltZUlzQmV0d2VlbihcbiAgICAgICAgICAgICAgICB0aW1lSXNSZXZlcnNlZCA/IHNlbGVjdGlvbkVuZCA6IHNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgICAgICAgIHQsXG4gICAgICAgICAgICAgICAgdGltZUlzUmV2ZXJzZWQgPyBzZWxlY3Rpb25TdGFydCA6IHNlbGVjdGlvbkVuZFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgW11cbiAgICApXG4gIH1cblxuICByZXR1cm4gc2VsZWN0ZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3F1YXJlXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLElBQUFBLFNBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUErQyxTQUFBRSx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUosd0JBQUFRLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSixHQUFBLFlBQUFHLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTCxHQUFBLFNBQUFNLE1BQUEsV0FBQUMscUJBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsR0FBQSxJQUFBWCxHQUFBLFFBQUFXLEdBQUEsa0JBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsR0FBQSxFQUFBVyxHQUFBLFNBQUFJLElBQUEsR0FBQVIscUJBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBVixHQUFBLEVBQUFXLEdBQUEsY0FBQUksSUFBQSxLQUFBQSxJQUFBLENBQUFWLEdBQUEsSUFBQVUsSUFBQSxDQUFBQyxHQUFBLEtBQUFSLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSCxNQUFBLEVBQUFLLEdBQUEsRUFBQUksSUFBQSxZQUFBVCxNQUFBLENBQUFLLEdBQUEsSUFBQVgsR0FBQSxDQUFBVyxHQUFBLFNBQUFMLE1BQUEsQ0FBQUosT0FBQSxHQUFBRixHQUFBLE1BQUFHLEtBQUEsSUFBQUEsS0FBQSxDQUFBYSxHQUFBLENBQUFoQixHQUFBLEVBQUFNLE1BQUEsWUFBQUEsTUFBQTtBQUUvQyxNQUFNVyxNQUFNLEdBQUdBLENBQUNDLGNBQTJCLEVBQUVDLFlBQXlCLEVBQUVDLFFBQTRCLEtBQWtCO0VBQ3BILElBQUlDLFFBQXFCLEdBQUcsRUFBRTtFQUM5QixJQUFJRixZQUFZLElBQUksSUFBSSxFQUFFO0lBQ3hCLElBQUlELGNBQWMsRUFBRUcsUUFBUSxHQUFHLENBQUNILGNBQWMsQ0FBQztFQUNqRCxDQUFDLE1BQU0sSUFBSUEsY0FBYyxFQUFFO0lBQ3pCLE1BQU1JLGNBQWMsR0FBRyxJQUFBQyxpQkFBUSxFQUFDLElBQUFDLG1CQUFVLEVBQUNMLFlBQVksQ0FBQyxFQUFFLElBQUFLLG1CQUFVLEVBQUNOLGNBQWMsQ0FBQyxDQUFDO0lBQ3JGLE1BQU1PLGNBQWMsR0FBR1AsY0FBYyxDQUFDUSxRQUFRLENBQUMsQ0FBQyxHQUFHUCxZQUFZLENBQUNPLFFBQVEsQ0FBQyxDQUFDO0lBRTFFTCxRQUFRLEdBQUdELFFBQVEsQ0FBQ08sTUFBTSxDQUN4QixDQUFDQyxHQUFHLEVBQUVDLFVBQVUsS0FDZEQsR0FBRyxDQUFDRSxNQUFNLENBQ1JELFVBQVUsQ0FBQ0UsTUFBTSxDQUNmQyxDQUFDLElBQ0NkLGNBQWMsSUFDZEMsWUFBWSxJQUNaNUIsU0FBUyxDQUFDMEMsYUFBYSxDQUNyQlgsY0FBYyxHQUFHSCxZQUFZLEdBQUdELGNBQWMsRUFDOUNjLENBQUMsRUFDRFYsY0FBYyxHQUFHSixjQUFjLEdBQUdDLFlBQ3BDLENBQUMsSUFDRDVCLFNBQVMsQ0FBQzJDLGFBQWEsQ0FDckJULGNBQWMsR0FBR04sWUFBWSxHQUFHRCxjQUFjLEVBQzlDYyxDQUFDLEVBQ0RQLGNBQWMsR0FBR1AsY0FBYyxHQUFHQyxZQUNwQyxDQUNKLENBQ0YsQ0FBQyxFQUNILEVBQ0YsQ0FBQztFQUNIO0VBRUEsT0FBT0UsUUFBUTtBQUNqQixDQUFDO0FBQUEsSUFBQWMsUUFBQSxHQUVjbEIsTUFBTTtBQUFBbUIsT0FBQSxDQUFBbEMsT0FBQSxHQUFBaUMsUUFBQSJ9