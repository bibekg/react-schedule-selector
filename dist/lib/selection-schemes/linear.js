"use strict";

require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.array.reduce.js");
var dateUtils = _interopRequireWildcard(require("../date-utils"));
var _dateFns = require("date-fns");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const linear = (selectionStart, selectionEnd, dateList) => {
  let selected = [];
  if (selectionEnd == null) {
    if (selectionStart) selected = [selectionStart];
  } else if (selectionStart) {
    const reverseSelection = (0, _dateFns.isBefore)(selectionEnd, selectionStart);
    selected = dateList.reduce((acc, dayOfTimes) => acc.concat(dayOfTimes.filter(t => selectionStart && selectionEnd && dateUtils.dateHourIsBetween(reverseSelection ? selectionEnd : selectionStart, t, reverseSelection ? selectionStart : selectionEnd))), []);
  }
  return selected;
};
var _default = exports.default = linear;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkYXRlVXRpbHMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZGF0ZUZucyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsImxpbmVhciIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZGF0ZUxpc3QiLCJzZWxlY3RlZCIsInJldmVyc2VTZWxlY3Rpb24iLCJpc0JlZm9yZSIsInJlZHVjZSIsImFjYyIsImRheU9mVGltZXMiLCJjb25jYXQiLCJmaWx0ZXIiLCJkYXRlSG91cklzQmV0d2VlbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2VsZWN0aW9uLXNjaGVtZXMvbGluZWFyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgZGF0ZVV0aWxzIGZyb20gJy4uL2RhdGUtdXRpbHMnXG5pbXBvcnQgeyBpc0JlZm9yZSB9IGZyb20gJ2RhdGUtZm5zJ1xuXG5jb25zdCBsaW5lYXIgPSAoc2VsZWN0aW9uU3RhcnQ6IERhdGUgfCBudWxsLCBzZWxlY3Rpb25FbmQ6IERhdGUgfCBudWxsLCBkYXRlTGlzdDogQXJyYXk8QXJyYXk8RGF0ZT4+KTogQXJyYXk8RGF0ZT4gPT4ge1xuICBsZXQgc2VsZWN0ZWQ6IEFycmF5PERhdGU+ID0gW11cbiAgaWYgKHNlbGVjdGlvbkVuZCA9PSBudWxsKSB7XG4gICAgaWYgKHNlbGVjdGlvblN0YXJ0KSBzZWxlY3RlZCA9IFtzZWxlY3Rpb25TdGFydF1cbiAgfSBlbHNlIGlmIChzZWxlY3Rpb25TdGFydCkge1xuICAgIGNvbnN0IHJldmVyc2VTZWxlY3Rpb24gPSBpc0JlZm9yZShzZWxlY3Rpb25FbmQsIHNlbGVjdGlvblN0YXJ0KVxuICAgIHNlbGVjdGVkID0gZGF0ZUxpc3QucmVkdWNlKFxuICAgICAgKGFjYywgZGF5T2ZUaW1lcykgPT5cbiAgICAgICAgYWNjLmNvbmNhdChcbiAgICAgICAgICBkYXlPZlRpbWVzLmZpbHRlcihcbiAgICAgICAgICAgIHQgPT5cbiAgICAgICAgICAgICAgc2VsZWN0aW9uU3RhcnQgJiZcbiAgICAgICAgICAgICAgc2VsZWN0aW9uRW5kICYmXG4gICAgICAgICAgICAgIGRhdGVVdGlscy5kYXRlSG91cklzQmV0d2VlbihcbiAgICAgICAgICAgICAgICByZXZlcnNlU2VsZWN0aW9uID8gc2VsZWN0aW9uRW5kIDogc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICByZXZlcnNlU2VsZWN0aW9uID8gc2VsZWN0aW9uU3RhcnQgOiBzZWxlY3Rpb25FbmRcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgIFtdXG4gICAgKVxuICB9XG4gIHJldHVybiBzZWxlY3RlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBsaW5lYXJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0EsSUFBQUEsU0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBQW1DLFNBQUFFLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBSix3QkFBQUksQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFdBQUFLLE9BQUEsRUFBQUwsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsSUFBQUgsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBakIsQ0FBQSxFQUFBYyxDQUFBLFNBQUFJLENBQUEsR0FBQVIsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQSxVQUFBSSxDQUFBLEtBQUFBLENBQUEsQ0FBQVgsR0FBQSxJQUFBVyxDQUFBLENBQUFDLEdBQUEsSUFBQVIsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBSSxDQUFBLElBQUFWLENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUEsWUFBQU4sQ0FBQSxDQUFBSCxPQUFBLEdBQUFMLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFnQixHQUFBLENBQUFuQixDQUFBLEVBQUFRLENBQUEsR0FBQUEsQ0FBQTtBQUVuQyxNQUFNWSxNQUFNLEdBQUdBLENBQUNDLGNBQTJCLEVBQUVDLFlBQXlCLEVBQUVDLFFBQTRCLEtBQWtCO0VBQ3BILElBQUlDLFFBQXFCLEdBQUcsRUFBRTtFQUM5QixJQUFJRixZQUFZLElBQUksSUFBSSxFQUFFO0lBQ3hCLElBQUlELGNBQWMsRUFBRUcsUUFBUSxHQUFHLENBQUNILGNBQWMsQ0FBQztFQUNqRCxDQUFDLE1BQU0sSUFBSUEsY0FBYyxFQUFFO0lBQ3pCLE1BQU1JLGdCQUFnQixHQUFHLElBQUFDLGlCQUFRLEVBQUNKLFlBQVksRUFBRUQsY0FBYyxDQUFDO0lBQy9ERyxRQUFRLEdBQUdELFFBQVEsQ0FBQ0ksTUFBTSxDQUN4QixDQUFDQyxHQUFHLEVBQUVDLFVBQVUsS0FDZEQsR0FBRyxDQUFDRSxNQUFNLENBQ1JELFVBQVUsQ0FBQ0UsTUFBTSxDQUNmNUIsQ0FBQyxJQUNDa0IsY0FBYyxJQUNkQyxZQUFZLElBQ1ozQixTQUFTLENBQUNxQyxpQkFBaUIsQ0FDekJQLGdCQUFnQixHQUFHSCxZQUFZLEdBQUdELGNBQWMsRUFDaERsQixDQUFDLEVBQ0RzQixnQkFBZ0IsR0FBR0osY0FBYyxHQUFHQyxZQUN0QyxDQUNKLENBQ0YsQ0FBQyxFQUNILEVBQ0YsQ0FBQztFQUNIO0VBQ0EsT0FBT0UsUUFBUTtBQUNqQixDQUFDO0FBQUEsSUFBQVMsUUFBQSxHQUFBQyxPQUFBLENBQUE3QixPQUFBLEdBRWNlLE1BQU0ifQ==