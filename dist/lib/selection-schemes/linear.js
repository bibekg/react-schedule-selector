"use strict";

require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.array.reduce.js");
var dateUtils = _interopRequireWildcard(require("../date-utils"));
var _dateFns = require("date-fns");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const linear = (selectionStart, selectionEnd, dateList) => {
  let selected = [];
  if (selectionEnd == null) {
    if (selectionStart) selected = [selectionStart];
  } else if (selectionStart) {
    const reverseSelection = (0, _dateFns.isBefore)(selectionEnd, selectionStart);
    selected = dateList.reduce((acc, dayOfTimes) => acc.concat(dayOfTimes.filter(t => selectionStart && selectionEnd && dateUtils.dateHourIsBetween(reverseSelection ? selectionEnd : selectionStart, t, reverseSelection ? selectionStart : selectionEnd))), []);
  }
  return selected;
};
var _default = linear;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkYXRlVXRpbHMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZGF0ZUZucyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJsaW5lYXIiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImRhdGVMaXN0Iiwic2VsZWN0ZWQiLCJyZXZlcnNlU2VsZWN0aW9uIiwiaXNCZWZvcmUiLCJyZWR1Y2UiLCJhY2MiLCJkYXlPZlRpbWVzIiwiY29uY2F0IiwiZmlsdGVyIiwidCIsImRhdGVIb3VySXNCZXR3ZWVuIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zZWxlY3Rpb24tc2NoZW1lcy9saW5lYXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBkYXRlVXRpbHMgZnJvbSAnLi4vZGF0ZS11dGlscydcbmltcG9ydCB7IGlzQmVmb3JlIH0gZnJvbSAnZGF0ZS1mbnMnXG5cbmNvbnN0IGxpbmVhciA9IChzZWxlY3Rpb25TdGFydDogRGF0ZSB8IG51bGwsIHNlbGVjdGlvbkVuZDogRGF0ZSB8IG51bGwsIGRhdGVMaXN0OiBBcnJheTxBcnJheTxEYXRlPj4pOiBBcnJheTxEYXRlPiA9PiB7XG4gIGxldCBzZWxlY3RlZDogQXJyYXk8RGF0ZT4gPSBbXVxuICBpZiAoc2VsZWN0aW9uRW5kID09IG51bGwpIHtcbiAgICBpZiAoc2VsZWN0aW9uU3RhcnQpIHNlbGVjdGVkID0gW3NlbGVjdGlvblN0YXJ0XVxuICB9IGVsc2UgaWYgKHNlbGVjdGlvblN0YXJ0KSB7XG4gICAgY29uc3QgcmV2ZXJzZVNlbGVjdGlvbiA9IGlzQmVmb3JlKHNlbGVjdGlvbkVuZCwgc2VsZWN0aW9uU3RhcnQpXG4gICAgc2VsZWN0ZWQgPSBkYXRlTGlzdC5yZWR1Y2UoXG4gICAgICAoYWNjLCBkYXlPZlRpbWVzKSA9PlxuICAgICAgICBhY2MuY29uY2F0KFxuICAgICAgICAgIGRheU9mVGltZXMuZmlsdGVyKFxuICAgICAgICAgICAgdCA9PlxuICAgICAgICAgICAgICBzZWxlY3Rpb25TdGFydCAmJlxuICAgICAgICAgICAgICBzZWxlY3Rpb25FbmQgJiZcbiAgICAgICAgICAgICAgZGF0ZVV0aWxzLmRhdGVIb3VySXNCZXR3ZWVuKFxuICAgICAgICAgICAgICAgIHJldmVyc2VTZWxlY3Rpb24gPyBzZWxlY3Rpb25FbmQgOiBzZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgIHJldmVyc2VTZWxlY3Rpb24gPyBzZWxlY3Rpb25TdGFydCA6IHNlbGVjdGlvbkVuZFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgW11cbiAgICApXG4gIH1cbiAgcmV0dXJuIHNlbGVjdGVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpbmVhclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSxJQUFBQSxTQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFBbUMsU0FBQUUseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFKLHdCQUFBUSxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxNQUFBLFdBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVgsR0FBQSxRQUFBVyxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEdBQUEsRUFBQVcsR0FBQSxTQUFBSSxJQUFBLEdBQUFSLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQVYsR0FBQSxFQUFBVyxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFYLEdBQUEsQ0FBQVcsR0FBQSxTQUFBTCxNQUFBLENBQUFKLE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQWEsR0FBQSxDQUFBaEIsR0FBQSxFQUFBTSxNQUFBLFlBQUFBLE1BQUE7QUFFbkMsTUFBTVcsTUFBTSxHQUFHQSxDQUFDQyxjQUEyQixFQUFFQyxZQUF5QixFQUFFQyxRQUE0QixLQUFrQjtFQUNwSCxJQUFJQyxRQUFxQixHQUFHLEVBQUU7RUFDOUIsSUFBSUYsWUFBWSxJQUFJLElBQUksRUFBRTtJQUN4QixJQUFJRCxjQUFjLEVBQUVHLFFBQVEsR0FBRyxDQUFDSCxjQUFjLENBQUM7RUFDakQsQ0FBQyxNQUFNLElBQUlBLGNBQWMsRUFBRTtJQUN6QixNQUFNSSxnQkFBZ0IsR0FBRyxJQUFBQyxpQkFBUSxFQUFDSixZQUFZLEVBQUVELGNBQWMsQ0FBQztJQUMvREcsUUFBUSxHQUFHRCxRQUFRLENBQUNJLE1BQU0sQ0FDeEIsQ0FBQ0MsR0FBRyxFQUFFQyxVQUFVLEtBQ2RELEdBQUcsQ0FBQ0UsTUFBTSxDQUNSRCxVQUFVLENBQUNFLE1BQU0sQ0FDZkMsQ0FBQyxJQUNDWCxjQUFjLElBQ2RDLFlBQVksSUFDWjVCLFNBQVMsQ0FBQ3VDLGlCQUFpQixDQUN6QlIsZ0JBQWdCLEdBQUdILFlBQVksR0FBR0QsY0FBYyxFQUNoRFcsQ0FBQyxFQUNEUCxnQkFBZ0IsR0FBR0osY0FBYyxHQUFHQyxZQUN0QyxDQUNKLENBQ0YsQ0FBQyxFQUNILEVBQ0YsQ0FBQztFQUNIO0VBQ0EsT0FBT0UsUUFBUTtBQUNqQixDQUFDO0FBQUEsSUFBQVUsUUFBQSxHQUVjZCxNQUFNO0FBQUFlLE9BQUEsQ0FBQTlCLE9BQUEsR0FBQTZCLFFBQUEifQ==