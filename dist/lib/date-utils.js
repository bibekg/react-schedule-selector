"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeIsBetween = exports.dateIsBetween = exports.dateHourIsBetween = void 0;
var _dateFns = require("date-fns");
// Helper function that uses date-fns methods to determine if a date is between two other dates

const dateHourIsBetween = (start, candidate, end) => (candidate.getTime() === start.getTime() || (0, _dateFns.isAfter)(candidate, start)) && (candidate.getTime() === end.getTime() || (0, _dateFns.isAfter)(end, candidate));
exports.dateHourIsBetween = dateHourIsBetween;
const dateIsBetween = (start, candidate, end) => {
  const startOfCandidate = (0, _dateFns.startOfDay)(candidate);
  const startOfStart = (0, _dateFns.startOfDay)(start);
  const startOfEnd = (0, _dateFns.startOfDay)(end);
  return (startOfCandidate.getTime() === startOfStart.getTime() || (0, _dateFns.isAfter)(startOfCandidate, startOfStart)) && (startOfCandidate.getTime() === startOfEnd.getTime() || (0, _dateFns.isAfter)(startOfEnd, startOfCandidate));
};
exports.dateIsBetween = dateIsBetween;
const timeIsBetween = (start, candidate, end) => {
  const candidateTime = candidate.getHours() * 60 + candidate.getMinutes();
  const startTime = start.getHours() * 60 + start.getMinutes();
  const endTime = end.getHours() * 60 + end.getMinutes();
  return candidateTime >= startTime && candidateTime <= endTime;
};
exports.timeIsBetween = timeIsBetween;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGF0ZUZucyIsInJlcXVpcmUiLCJkYXRlSG91cklzQmV0d2VlbiIsInN0YXJ0IiwiY2FuZGlkYXRlIiwiZW5kIiwiZ2V0VGltZSIsImlzQWZ0ZXIiLCJleHBvcnRzIiwiZGF0ZUlzQmV0d2VlbiIsInN0YXJ0T2ZDYW5kaWRhdGUiLCJzdGFydE9mRGF5Iiwic3RhcnRPZlN0YXJ0Iiwic3RhcnRPZkVuZCIsInRpbWVJc0JldHdlZW4iLCJjYW5kaWRhdGVUaW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwic3RhcnRUaW1lIiwiZW5kVGltZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZGF0ZS11dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRoYXQgdXNlcyBkYXRlLWZucyBtZXRob2RzIHRvIGRldGVybWluZSBpZiBhIGRhdGUgaXMgYmV0d2VlbiB0d28gb3RoZXIgZGF0ZXNcbmltcG9ydCB7IGlzQWZ0ZXIsIHN0YXJ0T2ZEYXkgfSBmcm9tICdkYXRlLWZucydcblxuZXhwb3J0IGNvbnN0IGRhdGVIb3VySXNCZXR3ZWVuID0gKHN0YXJ0OiBEYXRlLCBjYW5kaWRhdGU6IERhdGUsIGVuZDogRGF0ZSk6IGJvb2xlYW4gPT5cbiAgKGNhbmRpZGF0ZS5nZXRUaW1lKCkgPT09IHN0YXJ0LmdldFRpbWUoKSB8fCBpc0FmdGVyKGNhbmRpZGF0ZSwgc3RhcnQpKSAmJlxuICAoY2FuZGlkYXRlLmdldFRpbWUoKSA9PT0gZW5kLmdldFRpbWUoKSB8fCBpc0FmdGVyKGVuZCwgY2FuZGlkYXRlKSlcblxuZXhwb3J0IGNvbnN0IGRhdGVJc0JldHdlZW4gPSAoc3RhcnQ6IERhdGUsIGNhbmRpZGF0ZTogRGF0ZSwgZW5kOiBEYXRlKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IHN0YXJ0T2ZDYW5kaWRhdGUgPSBzdGFydE9mRGF5KGNhbmRpZGF0ZSlcbiAgY29uc3Qgc3RhcnRPZlN0YXJ0ID0gc3RhcnRPZkRheShzdGFydClcbiAgY29uc3Qgc3RhcnRPZkVuZCA9IHN0YXJ0T2ZEYXkoZW5kKVxuXG4gIHJldHVybiAoXG4gICAgKHN0YXJ0T2ZDYW5kaWRhdGUuZ2V0VGltZSgpID09PSBzdGFydE9mU3RhcnQuZ2V0VGltZSgpIHx8IGlzQWZ0ZXIoc3RhcnRPZkNhbmRpZGF0ZSwgc3RhcnRPZlN0YXJ0KSkgJiZcbiAgICAoc3RhcnRPZkNhbmRpZGF0ZS5nZXRUaW1lKCkgPT09IHN0YXJ0T2ZFbmQuZ2V0VGltZSgpIHx8IGlzQWZ0ZXIoc3RhcnRPZkVuZCwgc3RhcnRPZkNhbmRpZGF0ZSkpXG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IHRpbWVJc0JldHdlZW4gPSAoc3RhcnQ6IERhdGUsIGNhbmRpZGF0ZTogRGF0ZSwgZW5kOiBEYXRlKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IGNhbmRpZGF0ZVRpbWUgPSBjYW5kaWRhdGUuZ2V0SG91cnMoKSAqIDYwICsgY2FuZGlkYXRlLmdldE1pbnV0ZXMoKVxuICBjb25zdCBzdGFydFRpbWUgPSBzdGFydC5nZXRIb3VycygpICogNjAgKyBzdGFydC5nZXRNaW51dGVzKClcbiAgY29uc3QgZW5kVGltZSA9IGVuZC5nZXRIb3VycygpICogNjAgKyBlbmQuZ2V0TWludXRlcygpXG5cbiAgcmV0dXJuIGNhbmRpZGF0ZVRpbWUgPj0gc3RhcnRUaW1lICYmIGNhbmRpZGF0ZVRpbWUgPD0gZW5kVGltZVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFEQTs7QUFHTyxNQUFNQyxpQkFBaUIsR0FBR0EsQ0FBQ0MsS0FBVyxFQUFFQyxTQUFlLEVBQUVDLEdBQVMsS0FDdkUsQ0FBQ0QsU0FBUyxDQUFDRSxPQUFPLENBQUMsQ0FBQyxLQUFLSCxLQUFLLENBQUNHLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBQUMsZ0JBQU8sRUFBQ0gsU0FBUyxFQUFFRCxLQUFLLENBQUMsTUFDcEVDLFNBQVMsQ0FBQ0UsT0FBTyxDQUFDLENBQUMsS0FBS0QsR0FBRyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUFDLGdCQUFPLEVBQUNGLEdBQUcsRUFBRUQsU0FBUyxDQUFDLENBQUM7QUFBQUksT0FBQSxDQUFBTixpQkFBQSxHQUFBQSxpQkFBQTtBQUU3RCxNQUFNTyxhQUFhLEdBQUdBLENBQUNOLEtBQVcsRUFBRUMsU0FBZSxFQUFFQyxHQUFTLEtBQWM7RUFDakYsTUFBTUssZ0JBQWdCLEdBQUcsSUFBQUMsbUJBQVUsRUFBQ1AsU0FBUyxDQUFDO0VBQzlDLE1BQU1RLFlBQVksR0FBRyxJQUFBRCxtQkFBVSxFQUFDUixLQUFLLENBQUM7RUFDdEMsTUFBTVUsVUFBVSxHQUFHLElBQUFGLG1CQUFVLEVBQUNOLEdBQUcsQ0FBQztFQUVsQyxPQUNFLENBQUNLLGdCQUFnQixDQUFDSixPQUFPLENBQUMsQ0FBQyxLQUFLTSxZQUFZLENBQUNOLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBQUMsZ0JBQU8sRUFBQ0csZ0JBQWdCLEVBQUVFLFlBQVksQ0FBQyxNQUNoR0YsZ0JBQWdCLENBQUNKLE9BQU8sQ0FBQyxDQUFDLEtBQUtPLFVBQVUsQ0FBQ1AsT0FBTyxDQUFDLENBQUMsSUFBSSxJQUFBQyxnQkFBTyxFQUFDTSxVQUFVLEVBQUVILGdCQUFnQixDQUFDLENBQUM7QUFFbEcsQ0FBQztBQUFBRixPQUFBLENBQUFDLGFBQUEsR0FBQUEsYUFBQTtBQUVNLE1BQU1LLGFBQWEsR0FBR0EsQ0FBQ1gsS0FBVyxFQUFFQyxTQUFlLEVBQUVDLEdBQVMsS0FBYztFQUNqRixNQUFNVSxhQUFhLEdBQUdYLFNBQVMsQ0FBQ1ksUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUdaLFNBQVMsQ0FBQ2EsVUFBVSxDQUFDLENBQUM7RUFDeEUsTUFBTUMsU0FBUyxHQUFHZixLQUFLLENBQUNhLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHYixLQUFLLENBQUNjLFVBQVUsQ0FBQyxDQUFDO0VBQzVELE1BQU1FLE9BQU8sR0FBR2QsR0FBRyxDQUFDVyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBR1gsR0FBRyxDQUFDWSxVQUFVLENBQUMsQ0FBQztFQUV0RCxPQUFPRixhQUFhLElBQUlHLFNBQVMsSUFBSUgsYUFBYSxJQUFJSSxPQUFPO0FBQy9ELENBQUM7QUFBQVgsT0FBQSxDQUFBTSxhQUFBLEdBQUFBLGFBQUEifQ==